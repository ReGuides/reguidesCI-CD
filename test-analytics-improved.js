// –¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
const mongoose = require('mongoose');

async function testAnalyticsImproved() {
  try {
    console.log('üîó Testing improved analytics system...');
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
    await mongoose.connect('mongodb://localhost:27017/reguides');
    console.log('‚úÖ Connected to MongoDB');
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏
    const Analytics = require('./src/models/Analytics').default;
    const UserSession = require('./src/models/UserSession').default;
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    const totalAnalytics = await Analytics.countDocuments({});
    const totalSessions = await UserSession.countDocuments({});
    
    console.log('üìä Current data:');
    console.log(`  - Analytics records: ${totalAnalytics}`);
    console.log(`  - User sessions: ${totalSessions}`);
    
    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º API —Å–±—Ä–æ—Å–∞
    console.log('\nüîÑ Testing reset API...');
    
    const resetResponse = await fetch('http://localhost:3000/api/analytics/reset', {
      method: 'GET'
    });
    const resetData = await resetResponse.json();
    
    if (resetData.success) {
      console.log('‚úÖ Reset preview loaded:');
      console.log(`  - Total records: ${resetData.data.totalRecords}`);
      console.log(`  - Old records: ${resetData.data.oldRecords}`);
      console.log(`  - Test records: ${resetData.data.testRecords}`);
      console.log(`  - Recent records: ${resetData.data.recentRecords}`);
    } else {
      console.log('‚ùå Reset preview failed:', resetData.error);
    }
    
    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìà Testing improved stats API...');
    
    const statsResponse = await fetch('http://localhost:3000/api/analytics/stats-improved?period=7d');
    const statsData = await statsResponse.json();
    
    if (statsData.success) {
      console.log('‚úÖ Improved stats loaded:');
      console.log(`  - Total page views: ${statsData.data.total.totalPageViews}`);
      console.log(`  - Unique visitors: ${statsData.data.total.uniqueVisitors}`);
      console.log(`  - Total sessions: ${statsData.data.sessions.totalSessions}`);
      console.log(`  - New sessions: ${statsData.data.sessions.newSessions}`);
      console.log(`  - Returning sessions: ${statsData.data.sessions.returningSessions}`);
      console.log(`  - Engaged sessions: ${statsData.data.sessions.engagedSessions}`);
    } else {
      console.log('‚ùå Improved stats failed:', statsData.error);
    }
    
    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
    console.log('\nüéØ Testing improved tracking...');
    
    const testSessionId = 'test-session-' + Date.now();
    const trackData = {
      anonymousSessionId: testSessionId,
      page: '/test-page',
      pageType: 'other',
      pageId: 'test-123',
      deviceCategory: 'desktop',
      screenSize: 'large',
      region: 'europe',
      visitDate: new Date().toISOString().split('T')[0],
      visitHour: new Date().getHours(),
      visitDayOfWeek: new Date().getDay() + 1,
      timeOnPage: 45,
      scrollDepth: 75,
      clicks: 3,
      loadTime: 1200,
      isBounce: false
    };
    
    const trackResponse = await fetch('http://localhost:3000/api/analytics/track-improved', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(trackData)
    });
    
    const trackResult = await trackResponse.json();
    
    if (trackResult.success) {
      console.log('‚úÖ Improved tracking successful:', trackResult.message);
      console.log(`  - Is new session: ${trackResult.isNewSession}`);
    } else {
      console.log('‚ùå Improved tracking failed:', trackResult.error);
    }
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
    const createdSession = await UserSession.findOne({ sessionId: testSessionId });
    if (createdSession) {
      console.log('‚úÖ User session created:');
      console.log(`  - Session ID: ${createdSession.sessionId}`);
      console.log(`  - First visit: ${createdSession.firstVisit}`);
      console.log(`  - Visit count: ${createdSession.visitCount}`);
      console.log(`  - Page views: ${createdSession.pageViews}`);
      console.log(`  - Is returning: ${createdSession.isReturning}`);
      console.log(`  - Is engaged: ${createdSession.isEngaged}`);
    } else {
      console.log('‚ùå User session not created');
    }
    
    console.log('\n‚úÖ Test completed successfully!');
    
  } catch (error) {
    console.error('‚ùå Test failed:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üîå Disconnected from MongoDB');
  }
}

testAnalyticsImproved();
