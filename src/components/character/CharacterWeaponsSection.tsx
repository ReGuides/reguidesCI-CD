'use client';

import React, { useState, useEffect } from 'react';
import { Weapon, ArtifactOrCombination } from '@/types';
import OptimizedImage from '@/components/ui/optimized-image';
import { getImageWithFallback } from '@/lib/utils/imageUtils';
import { Zap, Shield, Heart, Target } from 'lucide-react';

interface CharacterWeaponsSectionProps {
  characterId: string;
}

interface MainStat {
  stat: string;
  targetValue?: string;
  unit?: string;
  description?: string;
  artifactType?: 'sands' | 'goblet' | 'circlet' | 'general';
}

interface TalentPriority {
  talentName: string;
  priority: number;
  description?: string;
}

interface Recommendation {
  weapons: Weapon[];
  artifacts: ArtifactOrCombination[];
  mainStats?: {
    detailedStats?: MainStat[];
    sands?: string[];
    goblet?: string[];
    circlet?: string[];
  };
  subStats?: string[];
  talentPriorities?: TalentPriority[];
  notes?: string;
}

const CharacterWeaponsSection: React.FC<CharacterWeaponsSectionProps> = ({ characterId }) => {
  const [recommendation, setRecommendation] = useState<Recommendation | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchRecommendation = async () => {
      try {
        setLoading(true);
        const response = await fetch(`/api/recommendations/${characterId}`);
        if (response.ok) {
          const data = await response.json();
          setRecommendation(data);
        } else {
          // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
          setRecommendation({
            weapons: [],
            artifacts: [],
            mainStats: undefined,
            subStats: [],
            talentPriorities: [],
            notes: undefined
          } as Recommendation);
        }
      } catch (error) {
        console.error('Error fetching recommendation:', error);
        setRecommendation({
          weapons: [],
          artifacts: [],
          mainStats: undefined,
          subStats: [],
          talentPriorities: [],
          notes: undefined
        } as Recommendation);
      } finally {
        setLoading(false);
      }
    };

    fetchRecommendation();
  }, [characterId]);

  const formatStatValue = (stat: MainStat) => {
    if (!stat.targetValue) return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    
    const value = stat.targetValue;
    const unit = stat.unit || '';
    
    if (unit === '%') {
      return `${value}%`;
    } else if (unit === 'EM') {
      return `${value} EM`;
    } else if (unit) {
      return `${value} ${unit}`;
    } else {
      return value;
    }
  };

  const formatStatName = (stat: string) => {
    const statNames: { [key: string]: string } = {
      'hp': 'HP',
      'hp_percent': 'HP%',
      'atk': '–°–∏–ª–∞ –∞—Ç–∞–∫–∏',
      'atk_percent': '–°–∏–ª–∞ –∞—Ç–∞–∫–∏%',
      'def': '–ó–∞—â–∏—Ç–∞',
      'def_percent': '–ó–∞—â–∏—Ç–∞%',
      'elemental_mastery': '–ú–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ —Å—Ç–∏—Ö–∏–π',
      'energy_recharge': '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏',
      'crit_rate': '–®–∞–Ω—Å –∫—Ä–∏—Ç. –ø–æ–ø–∞–¥–∞–Ω–∏—è',
      'crit_dmg': '–ö—Ä–∏—Ç. —É—Ä–æ–Ω',
      'pyro_dmg_bonus': '–ë–æ–Ω—É—Å –ü–∏—Ä–æ —É—Ä–æ–Ω–∞',
      'cryo_dmg_bonus': '–ë–æ–Ω—É—Å –ö—Ä–∏–æ —É—Ä–æ–Ω–∞',
      'hydro_dmg_bonus': '–ë–æ–Ω—É—Å –ì–∏–¥—Ä–æ —É—Ä–æ–Ω–∞',
      'electro_dmg_bonus': '–ë–æ–Ω—É—Å –≠–ª–µ–∫—Ç—Ä–æ —É—Ä–æ–Ω–∞',
      'dendro_dmg_bonus': '–ë–æ–Ω—É—Å –î–µ–Ω–¥—Ä–æ —É—Ä–æ–Ω–∞',
      'anemo_dmg_bonus': '–ë–æ–Ω—É—Å –ê–Ω–µ–º–æ —É—Ä–æ–Ω–∞',
      'geo_dmg_bonus': '–ë–æ–Ω—É—Å –ì–µ–æ —É—Ä–æ–Ω–∞',
      'physical_dmg_bonus': '–ë–æ–Ω—É—Å —Ñ–∏–∑. —É—Ä–æ–Ω–∞',
      'hp%': 'HP%',
      'atk%': '–°–∏–ª–∞ –∞—Ç–∞–∫–∏%',
      'def%': '–ó–∞—â–∏—Ç–∞%',
      'em': '–ú–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ —Å—Ç–∏—Ö–∏–π',
      'er': '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏',
      'cr': '–®–∞–Ω—Å –∫—Ä–∏—Ç. –ø–æ–ø–∞–¥–∞–Ω–∏—è',
      'cd': '–ö—Ä–∏—Ç. —É—Ä–æ–Ω',
      'crit': '–ö—Ä–∏—Ç'
    };
    return statNames[stat.toLowerCase()] || stat;
  };

  const formatTalentName = (talent: string) => {
    const talentNames: { [key: string]: string } = {
      'normal': '–û–±—ã—á–Ω–∞—è –∞—Ç–∞–∫–∞',
      'skill': '–≠–ª–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –Ω–∞–≤—ã–∫',
      'burst': '–í–∑—Ä—ã–≤ —Å—Ç–∏—Ö–∏–∏',
      'passive': '–ü–∞—Å—Å–∏–≤–Ω—ã–π —Ç–∞–ª–∞–Ω—Ç',
      'auto': '–û–±—ã—á–Ω–∞—è –∞—Ç–∞–∫–∞',
      'e': '–≠–ª–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –Ω–∞–≤—ã–∫',
      'q': '–í–∑—Ä—ã–≤ —Å—Ç–∏—Ö–∏–∏',
      'basic': '–û–±—ã—á–Ω–∞—è –∞—Ç–∞–∫–∞',
      'elemental': '–≠–ª–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –Ω–∞–≤—ã–∫',
      'ultimate': '–í–∑—Ä—ã–≤ —Å—Ç–∏—Ö–∏–∏'
    };
    return talentNames[talent.toLowerCase()] || talent;
  };

  const getStatIcon = (stat: string) => {
    const statLower = stat.toLowerCase();
    if (statLower.includes('—Ö–ø') || statLower.includes('hp')) return '‚ù§Ô∏è';
    if (statLower.includes('–∞—Ç–∞–∫–∞') || statLower.includes('attack')) return '‚öîÔ∏è';
    if (statLower.includes('–∑–∞—â–∏—Ç–∞') || statLower.includes('defense')) return 'üõ°Ô∏è';
    if (statLower.includes('–∫—Ä–∏—Ç') || statLower.includes('crit')) return 'üéØ';
    if (statLower.includes('—ç–Ω–µ—Ä–≥–∏—è') || statLower.includes('energy')) return '‚ö°';
    if (statLower.includes('–º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ') || statLower.includes('elemental')) return 'üåü';
    if (statLower.includes('–ª–µ—á–µ–Ω–∏–µ') || statLower.includes('healing')) return 'üíö';
    return 'üìä';
  };

  if (loading) {
    return (
      <div className="space-y-8">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          <div className="animate-pulse">
            <div className="h-8 bg-neutral-700 rounded mb-4"></div>
            <div className="space-y-4">
              {[1, 2, 3].map(i => (
                <div key={i} className="h-20 bg-neutral-700 rounded"></div>
              ))}
            </div>
          </div>
          <div className="animate-pulse">
            <div className="h-8 bg-neutral-700 rounded mb-4"></div>
            <div className="h-32 bg-neutral-700 rounded"></div>
          </div>
        </div>
      </div>
    );
  }

  if (!recommendation || (!recommendation.weapons.length && !recommendation.artifacts.length && !recommendation.mainStats && !recommendation.subStats?.length)) {
    return (
      <div className="space-y-8">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –û—Ä—É–∂–∏—è –∏ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã */}
          <div>
            {/* –û—Ä—É–∂–∏—è */}
            <div>
              <h2 className="block text-lg sm:text-2xl font-bold mb-4 sm:mb-6 text-text">
                –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –æ—Ä—É–∂–∏–µ
              </h2>
              <div className="text-center text-gray-400 py-8">
                <Zap className="w-12 h-12 mx-auto mb-4 text-gray-500" />
                –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ—Ä—É–∂–∏—é –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
              </div>
            </div>

            {/* –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã */}
            <div>
              <h2 className="block text-lg sm:text-2xl font-bold mb-4 sm:mb-6 text-text">
                –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
              </h2>
              <div className="text-center text-gray-400 py-8">
                <Shield className="w-12 h-12 mx-auto mb-4 text-gray-500" />
                –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
              </div>
            </div>
          </div>

          {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –°—Ç–∞—Ç—ã */}
          <div>
            <div className="bg-card border border-neutral-700 rounded-lg p-6">
              <h3 className="text-lg font-semibold mb-4 text-white">–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Å—Ç–∞—Ç—ã</h3>
              <div className="text-center text-gray-400 py-8">
                <Heart className="w-12 h-12 mx-auto mb-4 text-gray-500" />
                –°—Ç–∞—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-8">
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –û—Ä—É–∂–∏—è –∏ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã */}
        <div className="space-y-8">
          {/* –û—Ä—É–∂–∏—è */}
          <div>
            <h2 className="block text-lg sm:text-2xl font-bold mb-4 sm:mb-6 text-text">
              –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –æ—Ä—É–∂–∏–µ
            </h2>
            {recommendation.weapons.length > 0 ? (
              <div className="grid gap-4 grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-4 xl:grid-cols-5 px-2">
                {recommendation.weapons.map((weapon, idx) => {
                  if (!weapon || typeof weapon !== 'object' || !('name' in weapon) || !('id' in weapon)) {
                    return (
                      <div key={idx} className="text-red-400">–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ä—É–∂–∏—è</div>
                    );
                  }
                  // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—Ç—Ä–æ–∫–æ–≤—ã–π –∫–ª—é—á
                  let weaponKey;
                  if (typeof weapon.id === 'object' && weapon.id !== null) {
                    // –ï—Å–ª–∏ id —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º MongoDB, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å
                    weaponKey = `weapon-obj-${idx}`;
                  } else {
                    // –ï—Å–ª–∏ id —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–º–∏—Ç–∏–≤–æ–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
                    weaponKey = `weapon-${weapon.id?.toString() || idx}`;
                  }
                  return (
                    <div key={weaponKey} className="flex flex-col items-center p-4 bg-neutral-800 rounded-lg hover:bg-neutral-700 transition-colors min-h-[140px]">
                      <OptimizedImage
                        src={getImageWithFallback(weapon.image, weapon.name, 'weapon')}
                        alt={weapon.name?.toString() || '–û—Ä—É–∂–∏–µ'}
                        className="w-16 h-16 rounded mb-3"
                        type="weapon"
                      />
                      <div className="text-center w-full">
                        <div className="flex items-center justify-center gap-1 mb-2">
                          <span className="text-yellow-400 text-sm">‚òÖ{Number(weapon.rarity)}</span>
                        </div>
                        <p className="text-white text-xs font-medium leading-tight mb-1 min-h-[2.5rem] flex items-center justify-center">
                          {weapon.name?.toString() || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                        </p>
                        <p className="text-gray-400 text-xs">{weapon.type?.toString() || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
                      </div>
                    </div>
                  );
                })}
              </div>
            ) : (
              <div className="text-center text-gray-400 py-8">
                <Zap className="w-12 h-12 mx-auto mb-4 text-gray-500" />
                –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ—Ä—É–∂–∏—é –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
              </div>
            )}
          </div>

          {/* –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã */}
          <div>
            <h2 className="block text-lg sm:text-2xl font-bold mb-4 sm:mb-6 text-text">
              –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
            </h2>
            {recommendation.artifacts.length > 0 ? (
              <div className="grid gap-4 grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 px-2">
                {recommendation.artifacts.map((artifact, index) => {
                  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
                  if (artifact.setType === 'combination' && 'sets' in artifact && artifact.sets) {
                    // –ö–æ–º–±–∏–Ω–∞—Ü–∏—è —Å–µ—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2+2)
                    return (
                      <div key={`combination-${index}`} className="flex flex-col items-center p-4 bg-neutral-800 rounded-lg hover:bg-neutral-700 transition-colors min-h-[140px]">
                        <div className="grid grid-cols-2 gap-1 mb-3 w-16 h-16">
                          {artifact.sets.map((set: { id: string; name: string; image?: string }, setIndex: number) => {
                            // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è —è–≤–ª—è—é—Ç—Å—è –ø—Ä–∏–º–∏—Ç–∏–≤–∞–º–∏
                            const cleanSet = {
                              id: set.id?.toString() || '',
                              name: set.name?.toString() || '',
                              image: set.image?.toString() || ''
                            };
                            // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—Ç—Ä–æ–∫–æ–≤—ã–π –∫–ª—é—á
                            let setKey;
                            if (typeof cleanSet.id === 'object' && cleanSet.id !== null) {
                              // –ï—Å–ª–∏ id —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º MongoDB, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å
                              setKey = `set-obj-${setIndex}`;
                            } else {
                              // –ï—Å–ª–∏ id —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–º–∏—Ç–∏–≤–æ–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
                              setKey = `set-${cleanSet.id}-${setIndex}`;
                            }
                            return (
                              <OptimizedImage
                                key={setKey}
                                src={getImageWithFallback(cleanSet.image, cleanSet.name, 'artifact')}
                                alt={cleanSet.name}
                                className="w-full h-full rounded"
                                type="artifact"
                              />
                            );
                          })}
                        </div>
                        <div className="text-center w-full">
                          <p className="text-white text-xs font-medium leading-tight mb-2 min-h-[2.5rem] flex items-center justify-center">
                            2+2
                          </p>
                          <p className="text-gray-400 text-xs">–ö–æ–º–±–∏–Ω–∞—Ü–∏—è</p>
                        </div>
                      </div>
                    );
                  } else if (artifact.setType === 'single') {
                    // –û–¥–∏–Ω–æ—á–Ω—ã–π —Å–µ—Ç
                    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—Ç—Ä–æ–∫–æ–≤—ã–π –∫–ª—é—á
                    let artifactKey;
                    if (typeof artifact.id === 'object' && artifact.id !== null) {
                      // –ï—Å–ª–∏ id —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º MongoDB, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å
                      artifactKey = `single-obj-${index}`;
                    } else {
                      // –ï—Å–ª–∏ id —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–º–∏—Ç–∏–≤–æ–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
                      artifactKey = `single-${artifact.id?.toString() || artifact.name?.toString() || index}`;
                    }
                    return (
                      <div key={artifactKey} className="flex flex-col items-center p-4 bg-neutral-800 rounded-lg hover:bg-neutral-700 transition-colors min-h-[140px]">
                        <OptimizedImage
                          src={getImageWithFallback(artifact.image, artifact.name, 'artifact')}
                          alt={artifact.name?.toString() || '–ê—Ä—Ç–µ—Ñ–∞–∫—Ç'}
                          className="w-16 h-16 rounded mb-3"
                          type="artifact"
                        />
                        <div className="text-center w-full">
                          <p className="text-white text-xs font-medium leading-tight mb-2 min-h-[2.5rem] flex items-center justify-center">
                            {artifact.name?.toString() || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                          </p>
                        </div>
                      </div>
                    );
                  } else if ('id' in artifact && 'name' in artifact && !artifact.setType) {
                    // –û–±—ã—á–Ω—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏) - –±–µ–∑ setType
                    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—Ç—Ä–æ–∫–æ–≤—ã–π –∫–ª—é—á
                    let regularArtifactKey;
                    if (typeof artifact.id === 'object' && artifact.id !== null) {
                      // –ï—Å–ª–∏ id —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º MongoDB, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å
                      regularArtifactKey = `regular-obj-${index}`;
                    } else {
                      // –ï—Å–ª–∏ id —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–º–∏—Ç–∏–≤–æ–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
                      regularArtifactKey = `regular-${artifact.id?.toString() || artifact.name?.toString() || index}`;
                    }
                    return (
                      <div key={regularArtifactKey} className="flex flex-col items-center p-4 bg-neutral-800 rounded-lg hover:bg-neutral-700 transition-colors min-h-[140px]">
                        <OptimizedImage
                          src={getImageWithFallback(artifact.image, artifact.name, 'artifact')}
                          alt={artifact.name?.toString() || '–ê—Ä—Ç–µ—Ñ–∞–∫—Ç'}
                          className="w-16 h-16 rounded mb-3"
                          type="artifact"
                        />
                        <div className="text-center w-full">
                          <p className="text-white text-xs font-medium leading-tight mb-2 min-h-[2.5rem] flex items-center justify-center">
                            {artifact.name?.toString() || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                          </p>
                        </div>
                      </div>
                    );
                  } else {
                    // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
                    return (
                      <div key={`unknown-${index}`} className="flex flex-col items-center p-4 bg-neutral-800 rounded-lg hover:bg-neutral-700 transition-colors min-h-[140px]">
                        <div className="text-center w-full">
                          <p className="text-white text-xs font-medium leading-tight mb-2 min-h-[2.5rem] flex items-center justify-center">
                            –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
                          </p>
                        </div>
                      </div>
                    );
                  }
                })}
              </div>
            ) : (
              <div className="text-center text-gray-400 py-8">
                <Shield className="w-12 h-12 mx-auto mb-4 text-gray-500" />
                –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
              </div>
            )}
          </div>
        </div>

        {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –°—Ç–∞—Ç—ã */}
        <div>
          <div className="bg-card border border-neutral-700 rounded-lg p-6">
            <h3 className="text-lg font-semibold mb-4 text-white flex items-center gap-2">
              <Target className="w-5 h-5 text-blue-400" />
              –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Å—Ç–∞—Ç—ã
            </h3>
            
            {/* –î–µ—Ç–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—ã */}
            {recommendation.mainStats?.detailedStats && recommendation.mainStats.detailedStats.length > 0 ? (
              <div className="space-y-3">
                <h5 className="text-sm font-medium text-gray-300 mb-2 flex items-center gap-2">
                  <Heart className="w-4 h-4" />
                  –¶–µ–ª–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                </h5>
                <div className="grid gap-2">
                  {recommendation.mainStats.detailedStats.map((stat, idx) => (
                    <div key={idx} className="flex items-center justify-between p-3 bg-neutral-800 rounded-lg border border-neutral-700">
                      <div className="flex items-center gap-2">
                        <span className="text-lg">{getStatIcon(stat.stat)}</span>
                        <span className="font-medium text-white">{formatStatName(stat.stat)}</span>
                      </div>
                      <div className="text-right">
                        <div className="text-white font-semibold">{formatStatValue(stat)}</div>
                        {stat.description && (
                          <div className="text-xs text-gray-400 mt-1 max-w-48 text-right">
                            {stat.description}
                          </div>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            ) : null}

            {/* –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∞—Ç—ã –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ */}
            {recommendation.mainStats && (recommendation.mainStats.sands?.length || recommendation.mainStats.goblet?.length || recommendation.mainStats.circlet?.length) ? (
              <div className="space-y-3 mt-4">
                <h5 className="text-sm font-medium text-gray-300 mb-2">–û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç—ã –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤</h5>
                <div className="space-y-2 text-sm">
                  {recommendation.mainStats.sands && recommendation.mainStats.sands.length > 0 && (
                    <div className="flex justify-between items-center p-2 bg-neutral-800 rounded">
                      <span className="text-gray-400">–ü–µ—Å–∫–∏ –≤—Ä–µ–º–µ–Ω–∏:</span>
                      <span className="text-white">{recommendation.mainStats.sands.map(stat => formatStatName(stat)).join(', ')}</span>
                    </div>
                  )}
                  {recommendation.mainStats.goblet && recommendation.mainStats.goblet.length > 0 && (
                    <div className="flex justify-between items-center p-2 bg-neutral-800 rounded">
                      <span className="text-gray-400">–ö—É–±–æ–∫:</span>
                      <span className="text-white">{recommendation.mainStats.goblet.map(stat => formatStatName(stat)).join(', ')}</span>
                    </div>
                  )}
                  {recommendation.mainStats.circlet && recommendation.mainStats.circlet.length > 0 && (
                    <div className="flex justify-between items-center p-2 bg-neutral-800 rounded">
                      <span className="text-gray-400">–ö–æ—Ä–æ–Ω–∞:</span>
                      <span className="text-white">{recommendation.mainStats.circlet.map(stat => formatStatName(stat)).join(', ')}</span>
                    </div>
                  )}
                </div>
              </div>
            ) : null}

            {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—ã */}
            {recommendation.subStats && recommendation.subStats.length > 0 && (
              <div className="space-y-3 mt-4">
                <h5 className="text-sm font-medium text-gray-300 mb-2">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—ã</h5>
                <div className="flex flex-wrap gap-2">
                  {recommendation.subStats.map((stat, statIndex) => (
                    <span key={`stat-${statIndex}-${stat?.toString() || ''}`} className="px-3 py-1 bg-neutral-700 rounded text-xs text-white">
                      {formatStatName(stat)}
                    </span>
                  ))}
                </div>
              </div>
            )}

            {/* –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —Ç–∞–ª–∞–Ω—Ç–æ–≤ */}
            {recommendation.talentPriorities && recommendation.talentPriorities.length > 0 && (
              <div className="space-y-3 mt-4">
                <h5 className="text-sm font-medium text-gray-300 mb-2">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –ø—Ä–æ–∫–∞—á–∫–∏ —Ç–∞–ª–∞–Ω—Ç–æ–≤</h5>
                <div className="space-y-2">
                  {recommendation.talentPriorities
                    .sort((a, b) => a.priority - b.priority)
                    .map((talent, idx) => (
                      <div key={idx} className="flex items-center gap-3 p-2 bg-neutral-800 rounded">
                        <span className={`px-2 py-1 rounded text-xs font-medium ${
                          talent.priority === 1 ? 'bg-red-500/20 text-red-400' :
                          talent.priority === 2 ? 'bg-yellow-500/20 text-yellow-400' :
                          'bg-gray-500/20 text-gray-400'
                        }`}>
                          {talent.priority}
                        </span>
                        <span className="text-white text-sm">{formatTalentName(talent.talentName)}</span>
                        {talent.description && (
                          <span className="text-gray-400 text-xs ml-auto">({talent.description})</span>
                        )}
                      </div>
                    ))}
                </div>
              </div>
            )}

            {/* –ó–∞–º–µ—Ç–∫–∏ */}
            {recommendation.notes && (
              <div className="space-y-3 mt-4">
                <h5 className="text-sm font-medium text-gray-300 mb-2">–ó–∞–º–µ—Ç–∫–∏</h5>
                <p className="text-sm text-gray-400 bg-neutral-800 rounded-lg p-3">
                  {recommendation.notes}
                </p>
              </div>
            )}

            {/* –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö */}
            {!recommendation.mainStats?.detailedStats && 
             !recommendation.mainStats?.sands && 
             !recommendation.mainStats?.goblet && 
             !recommendation.mainStats?.circlet && 
             !recommendation.subStats?.length && 
             !recommendation.talentPriorities?.length && 
             !recommendation.notes && (
              <div className="text-center text-gray-400 py-8">
                <Heart className="w-12 h-12 mx-auto mb-4 text-gray-500" />
                –°—Ç–∞—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default CharacterWeaponsSection; 