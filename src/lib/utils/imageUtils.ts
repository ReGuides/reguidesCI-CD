// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏

export function getCharacterImage(name: string): string {
  if (!name) {
    return getFallbackImage('character');
  }
  
  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–∞
  const normalizedName = name.toLowerCase().replace(/[^a-z0-9]/g, '_');
  const result = `/images/characters/${normalizedName}.png`;
  
  return result;
}

export function getWeaponImage(name: string): string {
  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º—è –æ—Ä—É–∂–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–∞
  const normalizedName = name.toLowerCase().replace(/[^a-z0-9]/g, '-');
  
  // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –∏–º–µ–Ω–∏
  return `/images/weapons/${normalizedName}.webp`;
}

export function getArtifactImage(name: string): string {
  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–∞
  const normalizedName = name.toLowerCase().replace(/[^a-z0-9]/g, '-');
  
  // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –∏–º–µ–Ω–∏
  return `/images/artifacts/${normalizedName}.webp`;
}

export function getAvatarImage(name: string): string {
  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞
  const normalizedName = name.toLowerCase().replace(/[^a-z0-9]/g, '_');
  
  return `/images/avatars/${normalizedName}.png`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
export async function imageExists(url: string): Promise<boolean> {
  try {
    const response = await fetch(url, { method: 'HEAD' });
    return response.ok;
  } catch {
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è fallback –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
export function getFallbackImage(type: 'character' | 'weapon' | 'artifact' | 'avatar'): string {
  switch (type) {
    case 'character':
      return '/images/characters/default.png';
    case 'weapon':
      return '/images/weapons/default.png';
    case 'artifact':
      return '/images/artifacts/default.webp';
    case 'avatar':
      return '/images/avatars/default.png';
    default:
      return '/images/logos/default.png';
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
export function optimizeImageUrl(url: string): string {
  // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å CDN –∏–ª–∏ —Å–µ—Ä–≤–∏—Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  return url;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å fallback
export function getImageWithFallback(
  originalImage: string | undefined,
  name: string,
  type: 'character' | 'weapon' | 'artifact'
): string {
  console.log('üîß getImageWithFallback DEBUG:', { originalImage, name, type });
  
  let imageUrl = '';
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
  if (originalImage && originalImage.trim() !== '') {
    // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–ª–Ω—ã–π URL, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if (originalImage.startsWith('http://') || originalImage.startsWith('https://')) {
      console.log('üåê Using full URL:', originalImage);
      imageUrl = originalImage;
    }
    // –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å /, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    else if (originalImage.startsWith('/')) {
      console.log('üìÅ Using absolute path:', originalImage);
      imageUrl = originalImage;
    }
    // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –∏–º—è —Ñ–∞–π–ª–∞ (–±–µ–∑ –ø—É—Ç–∏), –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å
    else if (!originalImage.includes('/')) {
      // –î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–∞–ø–∫—É
      if (type === 'character') {
        imageUrl = `/images/characters/${originalImage}`;
        console.log('üë§ Using character filename with prefix:', imageUrl);
      } else {
        imageUrl = `/images/${type}s/${originalImage}`;
        console.log('üì¶ Using filename with prefix:', imageUrl);
      }
    }
    // –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –±–µ–∑ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ /, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
    else {
      if (type === 'character') {
        imageUrl = `/images/characters/${originalImage}`;
        console.log('üë§ Using character relative path with prefix:', imageUrl);
      } else {
        imageUrl = `/images/${type}s/${originalImage}`;
        console.log('üì¶ Using relative path with prefix:', imageUrl);
      }
    }
  }
  // –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∏ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  else if (name) {
    if (type === 'character') {
      imageUrl = getCharacterImage(name);
      console.log('üîÑ Using character name fallback:', imageUrl);
    } else if (type === 'weapon') {
      imageUrl = getWeaponImage(name);
      console.log('üîÑ Using weapon name fallback:', imageUrl);
    } else if (type === 'artifact') {
      imageUrl = getArtifactImage(name);
      console.log('üîÑ Using artifact name fallback:', imageUrl);
    }
  }
  // –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  else {
    imageUrl = getFallbackImage(type);
    console.log('üÜò Using default fallback:', imageUrl);
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º timestamp –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
  if (imageUrl.startsWith('/') && !imageUrl.startsWith('//')) {
    const timestamp = Date.now();
    const separator = imageUrl.includes('?') ? '&' : '?';
    imageUrl = `${imageUrl}${separator}v=${timestamp}`;
    console.log('üïí Added cache-busting timestamp:', imageUrl);
  }
  
  return imageUrl;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
export function getSafeImageUrl(
  originalImage: string | undefined,
  name: string,
  type: 'character' | 'weapon' | 'artifact'
): string {
  const imageUrl = getImageWithFallback(originalImage, name, type);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
  if (imageUrl.includes('waster-greatsword.webp')) {
    return getFallbackImage(type);
  }
  
  return imageUrl;
} 