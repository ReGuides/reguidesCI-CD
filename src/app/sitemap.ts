import { MetadataRoute } from 'next'
import connectDB from '@/lib/mongodb'
import { CharacterModel } from '@/models/Character'
import { WeaponModel } from '@/models/Weapon'
import { ArtifactModel } from '@/models/Artifact'
import { ArticleModel } from '@/models/Article'
import SiteSettings from '@/models/SiteSettings'

// –û—Ç–∫–ª—é—á–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ sitemap
export const dynamic = 'force-dynamic'
export const revalidate = 0

export default async function sitemap(): Promise<MetadataRoute.Sitemap> {
  const baseUrl = process.env.NEXT_PUBLIC_SITE_URL || 'https://reguides.ru'
  
  try {
    console.log('üîó Sitemap: Starting generation...')
    await connectDB()
    console.log('‚úÖ Sitemap: Database connected')
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∞–π—Ç–∞
    const settings = await SiteSettings.getSettings()
    console.log('‚öôÔ∏è Sitemap: Settings loaded:', {
      includeAllCharacters: settings.sitemap.includeAllCharacters,
      forceUpdate: settings.sitemap.forceUpdate
    })
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
    console.log('üìä Sitemap: Fetching data from database...')
    const [characters, weapons, artifacts, articles] = await Promise.all([
      settings.sitemap.includeAllCharacters 
        ? CharacterModel.find({}).select('id updatedAt') // –í—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏
        : CharacterModel.find({ isActive: true }).select('id updatedAt'), // –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ
      WeaponModel.find({}).select('id'),
      ArtifactModel.find({}).select('id'),
      ArticleModel.find({ isActive: true }).select('id updatedAt')
    ])
    
    console.log('üìà Sitemap: Data fetched:', {
      characters: characters.length,
      weapons: weapons.length,
      artifacts: artifacts.length,
      articles: articles.length
    })
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è sitemap
    if (settings.sitemap.forceUpdate) {
      console.log('üîÑ Sitemap: Force update requested, updating timestamp...')
      await SiteSettings.findOneAndUpdate(
        {},
        { 
          'sitemap.lastUpdated': new Date(),
          'sitemap.forceUpdate': false 
        }
      )
    }
    
    // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const staticPages: MetadataRoute.Sitemap = [
      {
        url: baseUrl,
        lastModified: new Date(),
        changeFrequency: 'daily',
        priority: 1,
      },
      {
        url: `${baseUrl}/characters`,
        lastModified: new Date(),
        changeFrequency: 'daily',
        priority: 0.9,
      },
      {
        url: `${baseUrl}/weapons`,
        lastModified: new Date(),
        changeFrequency: 'daily',
        priority: 0.8,
      },
      {
        url: `${baseUrl}/artifacts`,
        lastModified: new Date(),
        changeFrequency: 'daily',
        priority: 0.8,
      },
      {
        url: `${baseUrl}/news`,
        lastModified: new Date(),
        changeFrequency: 'daily',
        priority: 0.7,
      },
    ]
    
    // –°—Ç—Ä–∞–Ω–∏—Ü—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    const characterPages: MetadataRoute.Sitemap = characters.map((character) => ({
      url: `${baseUrl}/characters/${character.id}`,
      lastModified: character.updatedAt || new Date(),
      changeFrequency: 'daily' as const,
      priority: 0.8,
    }))
    
    // –°—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ä—É–∂–∏—è
    const weaponPages: MetadataRoute.Sitemap = weapons.map((weapon) => ({
      url: `${baseUrl}/weapons/${weapon.id}`,
      lastModified: new Date(),
      changeFrequency: 'daily' as const,
      priority: 0.7,
    }))
    
    // –°—Ç—Ä–∞–Ω–∏—Ü—ã –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
    const artifactPages: MetadataRoute.Sitemap = artifacts.map((artifact) => ({
      url: `${baseUrl}/artifacts/${artifact.id}`,
      lastModified: new Date(),
      changeFrequency: 'daily' as const,
      priority: 0.7,
    }))
    
    // –°—Ç—Ä–∞–Ω–∏—Ü—ã —Å—Ç–∞—Ç–µ–π
    const articlePages: MetadataRoute.Sitemap = articles.map((article) => ({
      url: `${baseUrl}/articles/${article.id}`,
      lastModified: article.updatedAt || new Date(),
      changeFrequency: 'daily' as const,
      priority: 0.6,
    }))
    
    const allPages = [...staticPages, ...characterPages, ...weaponPages, ...artifactPages, ...articlePages]
    console.log('üéØ Sitemap: Generated successfully!', {
      totalPages: allPages.length,
      static: staticPages.length,
      characters: characterPages.length,
      weapons: weaponPages.length,
      artifacts: artifactPages.length,
      articles: articlePages.length
    })
    return allPages
  } catch (error) {
    console.error('‚ùå Sitemap: Error generating sitemap:', error)
    console.error('‚ùå Sitemap: Using fallback - only static pages')
    
    // Fallback - —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    return [
      {
        url: baseUrl,
        lastModified: new Date(),
        changeFrequency: 'daily',
        priority: 1,
      },
      {
        url: `${baseUrl}/characters`,
        lastModified: new Date(),
        changeFrequency: 'daily',
        priority: 0.9,
      },
      {
        url: `${baseUrl}/weapons`,
        lastModified: new Date(),
        changeFrequency: 'daily',
        priority: 0.8,
      },
      {
        url: `${baseUrl}/artifacts`,
        lastModified: new Date(),
        changeFrequency: 'daily',
        priority: 0.8,
      },
      {
        url: `${baseUrl}/news`,
        lastModified: new Date(),
        changeFrequency: 'daily',
        priority: 0.7,
      },
    ]
  }
}
