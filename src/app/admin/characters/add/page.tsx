'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { Character } from '@/types';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import OptimizedImage from '@/components/ui/optimized-image';
import { Save, Upload, Star, Users, Shield, FileText, Settings, ArrowLeft } from 'lucide-react';
import Link from 'next/link';
import BuildForm from '@/components/builds/BuildForm';
import RecommendationForm from '@/components/builds/RecommendationForm';
import TextFormattingToolbar from '@/components/admin/TextFormattingToolbar';
import SuggestionHelper from '@/components/admin/SuggestionHelper';
import TalentManager from '@/components/admin/TalentManager';
import ConstellationManager from '@/components/admin/ConstellationManager';
import { Weapon } from '@/types';
import { getImageWithFallback } from '@/lib/utils/imageUtils';

export default function AddCharacterPage() {
  const router = useRouter();
  const [formData, setFormData] = useState<Partial<Character>>({
    name: '',
    id: '',
    element: '–ü–∏—Ä–æ',
    weaponType: '–î–≤—É—Ä—É—á–Ω—ã–π –º–µ—á',
    rarity: 5,
    region: '–ù–∞—Ç–ª–∞–Ω',
    description: '',
    image: '',
    gender: '',
    birthday: '',
    patchNumber: '',
    role: '',
    gameplayDescription: '',
    isFeatured: false
  });
  const [saving, setSaving] = useState(false);
  const [activeTab, setActiveTab] = useState<'basic' | 'details' | 'stats' | 'media' | 'builds' | 'recommendations' | 'talents' | 'constellations'>('basic');
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const [builds, setBuilds] = useState<any[]>([]);
  const [buildModalOpen, setBuildModalOpen] = useState(false);
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const [editingBuild, setEditingBuild] = useState<any>(null);
  const [weaponsList, setWeaponsList] = useState<Weapon[]>([]);
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const [recommendations, setRecommendations] = useState<any[]>([]);
  const [recommendationModalOpen, setRecommendationModalOpen] = useState(false);
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const [editingRecommendation, setEditingRecommendation] = useState<any>(null);
  const [isEditingGameplayDescription, setIsEditingGameplayDescription] = useState(false);
  const [gameplayDescriptionDraft, setGameplayDescriptionDraft] = useState('');

  const fetchWeapons = async () => {
    try {
      const response = await fetch('/api/weapons');
      if (response.ok) {
        const data = await response.json();
        const weaponsArray = Array.isArray(data.data) ? data.data : data.data?.weapons || data.weapons || data || [];
        setWeaponsList(weaponsArray);
      }
    } catch (error) {
      console.error('Error fetching weapons:', error);
    }
  };

  useEffect(() => {
    fetchWeapons();
  }, []);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setSaving(true);
    
    try {
      const response = await fetch('/api/characters', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData)
      });
      
      if (response.ok) {
        const result = await response.json();
        router.push(`/admin/characters/${result.id}/edit`);
      } else {
        console.error('Error creating character');
      }
    } catch (error) {
      console.error('Error saving character:', error);
    } finally {
      setSaving(false);
    }
  };

  const handleInputChange = (field: string, value: string | number | boolean) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∏–ª–¥–∞–º–∏
  const handleAddBuild = () => {
    setEditingBuild(null);
    setBuildModalOpen(true);
  };

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const handleEditBuild = (build: any) => {
    setEditingBuild(build);
    setBuildModalOpen(true);
  };

  const handleDeleteBuild = async (id: string) => {
    if (!confirm("–£–¥–∞–ª–∏—Ç—å –±–∏–ª–¥?")) return;
    setBuilds(prev => prev.filter(build => build.id !== id));
  };

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const handleSaveBuild = async (build: any) => {
    try {
      // –î–æ–±–∞–≤–ª—è–µ–º –±–∏–ª–¥ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const newBuild = {
        ...build,
        id: `build-${Date.now()}`,
        characterId: formData.id
      };
      setBuilds(prev => [...prev, newBuild]);
      setBuildModalOpen(false);
      setEditingBuild(null);
    } catch (error) {
      console.error('Error saving build:', error);
    }
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
  const handleAddRecommendation = () => {
    setEditingRecommendation(null);
    setRecommendationModalOpen(true);
  };

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const handleEditRecommendation = (recommendation: any) => {
    setEditingRecommendation(recommendation);
    setRecommendationModalOpen(true);
  };

  const handleDeleteRecommendation = async () => {
    if (!confirm("–£–¥–∞–ª–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏?")) return;
    setRecommendations([]);
  };

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const handleSaveRecommendation = async (recommendation: any) => {
    try {
      const newRecommendation = {
        ...recommendation,
        id: `recommendation-${Date.now()}`,
        characterId: formData.id
      };
      setRecommendations([newRecommendation]);
      setRecommendationModalOpen(false);
      setEditingRecommendation(null);
    } catch (error) {
      console.error('Error saving recommendation:', error);
    }
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≥–µ–π–º–ø–ª–µ—è
  const handleEditGameplayDescription = () => {
    setGameplayDescriptionDraft(formData.gameplayDescription || '');
    setIsEditingGameplayDescription(true);
  };

  const handleSaveGameplayDescription = () => {
    setFormData(prev => ({ ...prev, gameplayDescription: gameplayDescriptionDraft }));
    setIsEditingGameplayDescription(false);
  };

  const handleCancelGameplayDescription = () => {
    setIsEditingGameplayDescription(false);
    setGameplayDescriptionDraft('');
  };

  const handleInsertSuggestion = (text: string) => {
    const textarea = document.querySelector('textarea') as HTMLTextAreaElement;
    if (textarea) {
      const start = textarea.selectionStart;
      const end = textarea.selectionEnd;
      const currentDescription = gameplayDescriptionDraft;
      const newText = currentDescription.substring(0, start) + text + currentDescription.substring(end);
      setGameplayDescriptionDraft(newText);
      
      setTimeout(() => {
        textarea.focus();
        textarea.setSelectionRange(start + text.length, start + text.length);
      }, 0);
    }
  };

  const elements = [
    { value: '–ü–∏—Ä–æ', label: '–ü–∏—Ä–æ', color: 'bg-red-500', icon: 'üî•' },
    { value: '–ì–∏–¥—Ä–æ', label: '–ì–∏–¥—Ä–æ', color: 'bg-blue-500', icon: 'üíß' },
    { value: '–ê–Ω–µ–º–æ', label: '–ê–Ω–µ–º–æ', color: 'bg-green-500', icon: 'üå™Ô∏è' },
    { value: '–≠–ª–µ–∫—Ç—Ä–æ', label: '–≠–ª–µ–∫—Ç—Ä–æ', color: 'bg-purple-500', icon: '‚ö°' },
    { value: '–î–µ–Ω–¥—Ä–æ', label: '–î–µ–Ω–¥—Ä–æ', color: 'bg-green-600', icon: 'üå±' },
    { value: '–ö—Ä–∏–æ', label: '–ö—Ä–∏–æ', color: 'bg-cyan-500', icon: '‚ùÑÔ∏è' },
    { value: '–ì–µ–æ', label: '–ì–µ–æ', color: 'bg-yellow-500', icon: 'ü™®' }
  ];

  const weaponTypes = [
    { value: '–û–¥–Ω–æ—Ä—É—á–Ω—ã–π –º–µ—á', label: '–û–¥–Ω–æ—Ä—É—á–Ω—ã–π –º–µ—á', icon: '‚öîÔ∏è' },
    { value: '–î–≤—É—Ä—É—á–Ω—ã–π –º–µ—á', label: '–î–≤—É—Ä—É—á–Ω—ã–π –º–µ—á', icon: 'üó°Ô∏è' },
    { value: '–ö–æ–ø—å–µ', label: '–ö–æ–ø—å–µ', icon: 'üî±' },
    { value: '–õ—É–∫', label: '–õ—É–∫', icon: 'üèπ' },
    { value: '–ö–∞—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä', label: '–ö–∞—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä', icon: 'üìñ' }
  ];

  const regions = [
    { value: '–ú–æ–Ω–¥—à—Ç–∞–¥—Ç', label: '–ú–æ–Ω–¥—à—Ç–∞–¥—Ç', icon: 'üè∞' },
    { value: '–õ–∏ –Æ—ç', label: '–õ–∏ –Æ—ç', icon: 'üèÆ' },
    { value: '–ò–Ω–∞–¥–∑—É–º–∞', label: '–ò–Ω–∞–¥–∑—É–º–∞', icon: '‚ö°' },
    { value: '–°—É–º–µ—Ä—É', label: '–°—É–º–µ—Ä—É', icon: 'üå¥' },
    { value: '–§–æ–Ω—Ç–µ–π–Ω', label: '–§–æ–Ω—Ç–µ–π–Ω', icon: 'üåä' },
    { value: '–ù–∞—Ç–ª–∞–Ω', label: '–ù–∞—Ç–ª–∞–Ω', icon: 'üåã' },
    { value: '–°–Ω–µ–∂–Ω–∞—è', label: '–°–Ω–µ–∂–Ω–∞—è', icon: '‚ùÑÔ∏è' },
    { value: '–ù–æ–¥-–ö—Ä–∞–π', label: '–ù–æ–¥-–ö—Ä–∞–π', icon: 'üåô' },
    { value: '–ö–∞—ç–Ω—Ä–∏–∞—Ä—Ö', label: '–ö–∞—ç–Ω—Ä–∏–∞—Ä—Ö', icon: '‚öîÔ∏è' }
  ];

  const tabs = [
    { id: 'basic', label: '–û—Å–Ω–æ–≤–Ω–æ–µ', icon: Users },
    { id: 'stats', label: '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏', icon: Shield },
    { id: 'media', label: '–ú–µ–¥–∏–∞', icon: Upload },
    { id: 'builds', label: '–ë–∏–ª–¥—ã', icon: Settings },
    { id: 'recommendations', label: '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', icon: Star },
    { id: 'talents', label: '–¢–∞–ª–∞–Ω—Ç—ã', icon: FileText },
    { id: 'constellations', label: '–°–æ–∑–≤–µ–∑–¥–∏—è', icon: Star }
  ];

  const getAvatarSrc = () => {
    if (!formData.image) return '/default-avatar.png';
    if (formData.image.startsWith('http')) return formData.image;
    return `/images/characters/${formData.image}`;
  };

  return (
    <div className="p-4 md:p-6 max-w-6xl mx-auto">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center space-x-4">
          <Link href="/admin/characters">
            <Button variant="outline" size="sm">
              <ArrowLeft className="w-4 h-4 mr-2" />
              –ù–∞–∑–∞–¥
            </Button>
          </Link>
          <h1 className="text-2xl md:text-3xl font-bold text-white">–î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</h1>
        </div>
      </div>

      <form onSubmit={handleSubmit} className="space-y-6">
        {/* –í–∫–ª–∞–¥–∫–∏ */}
        <div className="flex space-x-1 bg-neutral-700/50 rounded-lg p-1">
          {tabs.map((tab) => {
            const Icon = tab.icon;
            return (
              <button
                key={tab.id}
                type="button"
                onClick={() => setActiveTab(tab.id as 'basic' | 'details' | 'stats' | 'media' | 'builds' | 'recommendations' | 'talents' | 'constellations')}
                className={`flex items-center space-x-2 px-4 py-2 rounded-md text-sm font-medium transition-all ${
                  activeTab === tab.id
                    ? 'bg-purple-600 text-white shadow-lg'
                    : 'text-neutral-400 hover:text-white hover:bg-neutral-600'
                }`}
              >
                <Icon className="w-4 h-4 text-neutral-400" />
                <span>{tab.label}</span>
              </button>
            );
          })}
        </div>

        {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        {activeTab === 'basic' && (
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 items-start">
            {/* –õ–µ–≤–∞—è —á–∞—Å—Ç—å: –ø–æ–ª—è */}
            <div className="lg:col-span-2 space-y-4">
              <div>
                <label className="text-sm text-gray-400 mb-2 block">–ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</label>
                <Input
                  value={formData.name}
                  onChange={(e) => handleInputChange('name', e.target.value)}
                  className="bg-neutral-700 border-neutral-600 text-white"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"
                  required
                />
              </div>
              <div>
                <label className="text-sm text-gray-400 mb-2 block">ID –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</label>
                <Input
                  value={formData.id}
                  onChange={(e) => handleInputChange('id', e.target.value)}
                  className="bg-neutral-700 border-neutral-600 text-white"
                  placeholder="albedo"
                  required
                />
              </div>
              
              <div>
                <label className="text-sm text-gray-400 mb-2 block">–û–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</label>
                <textarea
                  value={formData.description}
                  onChange={(e) => handleInputChange('description', e.target.value)}
                  className="w-full px-3 py-2 bg-neutral-700 border border-neutral-600 rounded-lg text-white min-h-[100px] resize-none"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞..."
                />
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                  <label className="text-sm text-gray-400 mb-2 block">–ü–æ–ª</label>
                  <select
                    value={formData.gender}
                    onChange={(e) => handleInputChange('gender', e.target.value)}
                    className="w-full px-3 py-2 bg-neutral-700 border border-neutral-600 rounded-lg text-white"
                  >
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª</option>
                    <option value="–ú—É–∂—Å–∫–æ–π">–ú—É–∂—Å–∫–æ–π</option>
                    <option value="–ñ–µ–Ω—Å–∫–∏–π">–ñ–µ–Ω—Å–∫–∏–π</option>
                  </select>
                </div>
                
                <div>
                  <label className="text-sm text-gray-400 mb-2 block">–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è</label>
                  <Input
                    value={formData.birthday}
                    onChange={(e) => handleInputChange('birthday', e.target.value)}
                    className="bg-neutral-700 border-neutral-600 text-white"
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 8 –∏—é–Ω—è"
                  />
                </div>
                
                <div>
                  <label className="text-sm text-gray-400 mb-2 block">–ù–æ–º–µ—Ä –ø–∞—Ç—á–∞</label>
                  <Input
                    value={formData.patchNumber}
                    onChange={(e) => handleInputChange('patchNumber', e.target.value)}
                    className="bg-neutral-700 border-neutral-600 text-white"
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 5.6"
                  />
                </div>
              </div>
              
              <div>
                <label className="text-sm text-gray-400 mb-2 block">–≠–ª–µ–º–µ–Ω—Ç</label>
                <select
                  value={formData.element}
                  onChange={(e) => handleInputChange('element', e.target.value)}
                  className="w-full px-3 py-2 bg-neutral-700 border border-neutral-600 rounded-lg text-white"
                >
                  {elements.map(element => (
                    <option key={element.value} value={element.value}>
                      {element.icon} {element.label}
                    </option>
                  ))}
                </select>
              </div>

              <div className="space-y-4">
                <div>
                  <label className="text-sm text-gray-400 mb-2 block">–¢–∏–ø –æ—Ä—É–∂–∏—è</label>
                  <select
                    value={formData.weaponType}
                    onChange={(e) => handleInputChange('weaponType', e.target.value)}
                    className="w-full px-3 py-2 bg-neutral-700 border border-neutral-600 rounded-lg text-white"
                  >
                    {weaponTypes.map(weapon => (
                      <option key={weapon.value} value={weapon.value}>
                        {weapon.icon} {weapon.label}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="text-sm text-gray-400 mb-2 block">–†–µ–¥–∫–æ—Å—Ç—å</label>
                  <select
                    value={formData.rarity}
                    onChange={(e) => handleInputChange('rarity', parseInt(e.target.value))}
                    className="w-full px-3 py-2 bg-neutral-700 border border-neutral-600 rounded-lg text-white"
                  >
                    <option value={4}>‚≠ê 4‚òÖ</option>
                    <option value={5}>‚≠ê‚≠ê 5‚òÖ</option>
                  </select>
                </div>

                <div>
                  <label className="text-sm text-gray-400 mb-2 block">–†–µ–≥–∏–æ–Ω</label>
                  <select
                    value={formData.region}
                    onChange={(e) => handleInputChange('region', e.target.value)}
                    className="w-full px-3 py-2 bg-neutral-700 border border-neutral-600 rounded-lg text-white"
                  >
                    {regions.map(region => (
                      <option key={region.value} value={region.value}>
                        {region.icon} {region.label}
                      </option>
                    ))}
                  </select>
                </div>
              </div>

              <div className="flex items-center space-x-3">
                <input
                  type="checkbox"
                  id="isFeatured"
                  checked={formData.isFeatured}
                  onChange={(e) => handleInputChange('isFeatured', e.target.checked)}
                  className="w-4 h-4 text-purple-600 bg-neutral-700 border-neutral-600 rounded"
                />
                <label htmlFor="isFeatured" className="text-sm text-gray-400">
                  –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂
                </label>
              </div>
            </div>

            {/* –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å: –∞–≤–∞—Ç–∞—Ä */}
            <div className="flex flex-col items-center gap-4">
              <OptimizedImage
                src={getAvatarSrc()}
                alt={formData.name || '–ê–≤–∞—Ç–∞—Ä'}
                className="w-40 h-40 rounded-full object-cover border-4 border-neutral-700 bg-neutral-800"
                type="character"
              />
            </div>
          </div>
        )}

        {/* –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ */}
        {activeTab === 'stats' && (
          <div className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="bg-neutral-700/50 rounded-lg p-4">
                <h3 className="text-sm font-medium text-neutral-300 mb-3">–ë–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</h3>
                <div className="space-y-2">
                  <div className="flex justify-between text-xs">
                    <span className="text-neutral-400">HP:</span>
                    <span className="text-white">12,380</span>
                  </div>
                  <div className="flex justify-between text-xs">
                    <span className="text-neutral-400">–ê—Ç–∞–∫–∞:</span>
                    <span className="text-white">234</span>
                  </div>
                  <div className="flex justify-between text-xs">
                    <span className="text-neutral-400">–ó–∞—â–∏—Ç–∞:</span>
                    <span className="text-white">751</span>
                  </div>
                </div>
              </div>

              <div className="bg-neutral-700/50 rounded-lg p-4">
                <h3 className="text-sm font-medium text-neutral-300 mb-3">–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</h3>
                <div className="space-y-2">
                  <div className="flex justify-between text-xs">
                    <span className="text-neutral-400">–ö—Ä–∏—Ç. —à–∞–Ω—Å:</span>
                    <span className="text-white">5%</span>
                  </div>
                  <div className="flex justify-between text-xs">
                    <span className="text-neutral-400">–ö—Ä–∏—Ç. —É—Ä–æ–Ω:</span>
                    <span className="text-white">50%</span>
                  </div>
                </div>
              </div>

              <div className="bg-neutral-700/50 rounded-lg p-4">
                <h3 className="text-sm font-medium text-neutral-300 mb-3">–≠–ª–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</h3>
                <div className="space-y-2">
                  <div className="flex justify-between text-xs">
                    <span className="text-neutral-400">–ú–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ —Å—Ç–∏—Ö–∏–π:</span>
                    <span className="text-white">0</span>
                  </div>
                  <div className="flex justify-between text-xs">
                    <span className="text-neutral-400">–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏:</span>
                    <span className="text-white">100%</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* –ú–µ–¥–∏–∞ */}
        {activeTab === 'media' && (
          <div className="space-y-4">
            <div>
              <label className="text-sm text-gray-400 mb-2 block">URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</label>
              <Input
                value={formData.image}
                onChange={(e) => handleInputChange('image', e.target.value)}
                className="bg-neutral-700 border-neutral-600 text-white"
                placeholder="/images/characters/albedo.png"
              />
            </div>

            {formData.image && (
              <div className="border border-neutral-700 rounded-lg p-4 bg-neutral-700/30">
                <h3 className="text-sm text-gray-400 mb-3">–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä</h3>
                <div className="flex items-center space-x-4">
                  <OptimizedImage
                    src={getAvatarSrc()}
                    alt={formData.name || 'Character'}
                    className="w-20 h-20 rounded-lg object-cover border border-neutral-600"
                    type="character"
                  />
                  <div>
                    <h4 className="text-white font-medium text-lg">{formData.name}</h4>
                    <div className="flex items-center space-x-2 mt-2">
                      {elements.find(e => e.value === formData.element) && (
                        <Badge className={elements.find(e => e.value === formData.element)?.color}>
                          {elements.find(e => e.value === formData.element)?.icon} {elements.find(e => e.value === formData.element)?.label}
                        </Badge>
                      )}
                      <Badge className="bg-yellow-600">
                        <Star className="w-3 h-3 mr-1" />
                        {formData.rarity}‚òÖ
                      </Badge>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        )}

        {/* –ë–∏–ª–¥—ã */}
        {activeTab === 'builds' && (
          <div className="space-y-4">
            {/* –û–ø–∏—Å–∞–Ω–∏–µ –≥–µ–π–º–ø–ª–µ—è */}
            <div className="bg-neutral-800 border border-neutral-700 rounded-lg p-4">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-semibold text-white">–û–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≥–µ–π–º–ø–ª–µ—è</h3>
                {isEditingGameplayDescription ? (
                  <div className="flex gap-2">
                    <Button
                      type="button"
                      onClick={handleSaveGameplayDescription}
                      className="bg-green-600 hover:bg-green-700 text-sm"
                    >
                      –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                    </Button>
                    <Button
                      type="button"
                      onClick={handleCancelGameplayDescription}
                      variant="outline"
                      className="text-sm"
                    >
                      –û—Ç–º–µ–Ω–∞
                    </Button>
                  </div>
                ) : (
                  <Button
                    type="button"
                    onClick={handleEditGameplayDescription}
                    className="bg-blue-600 hover:bg-blue-700 text-sm"
                  >
                    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                  </Button>
                )}
              </div>
              
              {isEditingGameplayDescription ? (
                <>
                  <textarea
                    value={gameplayDescriptionDraft}
                    onChange={(e) => setGameplayDescriptionDraft(e.target.value)}
                    className="w-full min-h-[120px] bg-neutral-700 text-white rounded p-3 border border-neutral-600 resize-none"
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≥–µ–π–º–ø–ª–µ—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞..."
                  />
                  <TextFormattingToolbar onInsert={handleInsertSuggestion} />
                  <SuggestionHelper
                    onInsert={handleInsertSuggestion}
                    onClose={() => {}}
                    characterId={formData.id || ''}
                  />
                  <div className="mt-2 text-xs text-gray-400 bg-neutral-900 rounded p-2">
                    <div className="font-semibold mb-1 text-gray-300">–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞:</div>
                    <ul className="list-disc pl-5 space-y-1">
                      <li><b>–ñ–∏—Ä–Ω—ã–π:</b> <code>**—Ç–µ–∫—Å—Ç**</code> –∏–ª–∏ <code>__—Ç–µ–∫—Å—Ç__</code></li>
                      <li><b>–¶–≤–µ—Ç:</b> <code>[pyro:–ü–∏—Ä–æ]</code>, <code>[hydro:–ì–∏–¥—Ä–æ]</code>, <code>[electro:–≠–ª–µ–∫—Ç—Ä–æ]</code>, <code>[cryo:–ö—Ä–∏–æ]</code>, <code>[anemo:–ê–Ω–µ–º–æ]</code>, <code>[geo:–ì–µ–æ]</code>, <code>[dendro:–î–µ–Ω–¥—Ä–æ]</code>, <code>[red:–ö—Ä–∞—Å–Ω—ã–π]</code>, <code>[blue:–ì–æ–ª—É–±–æ–π]</code>, <code>[green:–ó–µ–ª—ë–Ω—ã–π]</code>, <code>[yellow:–ñ—ë–ª—Ç—ã–π]</code>, <code>[orange:–û—Ä–∞–Ω–∂–µ–≤—ã–π]</code>, <code>[purple:–§–∏–æ–ª–µ—Ç–æ–≤—ã–π]</code>, <code>[cyan:–ì–æ–ª—É–±–æ–π]</code>, <code>[pink:–†–æ–∑–æ–≤—ã–π]</code></li>
                      <li><b>–°—Å—ã–ª–∫–∞:</b> <code>[—Ç–µ–∫—Å—Ç](https://site.ru)</code></li>
                      <li><b>–ú–æ–¥–∞–ª–∫–∞ –æ—Ä—É–∂–∏—è:</b> <code>[–ú–µ—á –§–∞–≤–æ–Ω–∏—è](weapon:favonius-sword)</code></li>
                      <li><b>–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ:</b> <code>[pyro:**–ü–∏—Ä–æ –î–ü–°**]</code></li>
                    </ul>
                    <div className="mt-1 text-gray-500">–î–ª—è –º–æ–¥–∞–ª–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã: <b>weapon:ID</b>, <b>artifact:ID</b>, <b>character:ID</b>, <b>talent:—Ç–∏–ø</b>, <b>constellation:—É—Ä–æ–≤–µ–Ω—å</b></div>
                  </div>
                </>
              ) : (
                <div className="text-neutral-300 whitespace-pre-line">
                  {formData.gameplayDescription || <span className="text-neutral-500">–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è</span>}
                </div>
              )}
            </div>

            <div className="flex items-center justify-between">
              <h3 className="text-lg font-semibold text-white">–ë–∏–ª–¥—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</h3>
              <Button type="button" onClick={handleAddBuild} className="bg-blue-600 hover:bg-blue-700">
                –î–æ–±–∞–≤–∏—Ç—å –±–∏–ª–¥
              </Button>
            </div>

            {builds.length === 0 ? (
              <div className="text-center py-8 text-gray-400">
                <Settings className="w-12 h-12 mx-auto mb-4 text-gray-600" />
                <p>–ë–∏–ª–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
                <p className="text-sm">–ù–∞–∂–º–∏—Ç–µ &quot;–î–æ–±–∞–≤–∏—Ç—å –±–∏–ª–¥&quot; —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –±–∏–ª–¥</p>
              </div>
            ) : (
              <div className="space-y-3">
                {builds.map((build, index) => (
                  <div key={build.id || `build-${index}`} className="bg-neutral-800 border border-neutral-700 rounded-lg p-4">
                    <div className="flex items-center justify-between mb-2">
                      <h4 className="text-lg font-semibold text-white">{build.title}</h4>
                      <div className="flex gap-2">
                        <Button
                          type="button"
                          onClick={() => handleEditBuild(build)}
                          variant="outline"
                          size="sm"
                        >
                          –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                        </Button>
                        <Button
                          type="button"
                          onClick={() => handleDeleteBuild(build.id || `build-${index}`)}
                          variant="outline"
                          size="sm"
                          className="text-red-400 hover:text-red-300"
                        >
                          –£–¥–∞–ª–∏—Ç—å
                        </Button>
                      </div>
                    </div>
                    {build.description && (
                      <p className="text-gray-400 text-sm mb-2">{build.description}</p>
                    )}
                    {build.role && (
                      <Badge variant="secondary" className="mb-2">
                        {build.role}
                      </Badge>
                    )}
                    {build.isFeatured && (
                      <Badge variant="default" className="ml-2">
                        –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π
                      </Badge>
                    )}
                  </div>
                ))}
              </div>
            )}
          </div>
        )}

        {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
        {activeTab === 'recommendations' && (
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-semibold text-white">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</h3>
              <Button 
                type="button" 
                onClick={handleAddRecommendation} 
                className="bg-green-600 hover:bg-green-700"
              >
                {recommendations.length > 0 ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏' : '–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'}
              </Button>
            </div>

            {recommendations.length === 0 ? (
              <div className="text-center py-8 text-gray-400">
                <Star className="w-12 h-12 mx-auto mb-4 text-gray-600" />
                <p>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
                <p className="text-sm">–ù–∞–∂–º–∏—Ç–µ &quot;–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏&quot; —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</p>
              </div>
            ) : (
              <div className="bg-neutral-800 border border-neutral-700 rounded-lg p-4">
                <div className="flex items-center justify-between mb-4">
                  <h4 className="text-lg font-semibold text-white">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</h4>
                  <div className="flex gap-2">
                    <Button
                      type="button"
                      onClick={() => handleEditRecommendation(recommendations[0])}
                      variant="outline"
                      size="sm"
                    >
                      –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </Button>
                    <Button
                      type="button"
                      onClick={() => handleDeleteRecommendation()}
                      variant="outline"
                      size="sm"
                      className="text-red-400 hover:text-red-300"
                    >
                      –£–¥–∞–ª–∏—Ç—å
                    </Button>
                  </div>
                </div>
                
                {/* –û—Ä—É–∂–∏–µ */}
                {recommendations[0].weapons && recommendations[0].weapons.length > 0 && (
                  <div className="mb-4">
                    <h5 className="text-sm font-medium text-gray-400 mb-2">–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –æ—Ä—É–∂–∏–µ:</h5>
                    <div className="flex flex-wrap gap-2">
                      {/* eslint-disable-next-line @typescript-eslint/no-explicit-any */}
                      {recommendations[0].weapons.map((weaponItem: any, index: number) => {
                        const weaponId = typeof weaponItem === 'string' ? weaponItem : weaponItem.id;
                        // eslint-disable-next-line @typescript-eslint/no-explicit-any
                        const weapon = weaponsList.find((w: any) => w.id === weaponId);
                        
                        if (weapon) {
                          return (
                            <div key={`weapon-${weaponId}-${index}`} className="flex items-center gap-2 bg-neutral-700 rounded px-2 py-1">
                              <OptimizedImage
                                src={getImageWithFallback(weapon.image, weapon.name, 'weapon')}
                                alt={weapon.name}
                                className="w-6 h-6 rounded"
                                type="weapon"
                              />
                              <span className="text-xs text-white">{weapon.name}</span>
                            </div>
                          );
                        } else {
                          return (
                            <div key={`weapon-not-found-${weaponId}-${index}`} className="flex items-center gap-2 bg-neutral-700 rounded px-2 py-1">
                              <span className="text-xs text-red-400">–û—Ä—É–∂–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {weaponId}</span>
                            </div>
                          );
                        }
                      })}
                    </div>
                  </div>
                )}
                
                {/* –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã */}
                {recommendations[0].artifacts && recommendations[0].artifacts.length > 0 && (
                  <div className="mb-4">
                    <h5 className="text-sm font-medium text-gray-400 mb-2">–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã:</h5>
                    <div className="flex flex-wrap gap-2">
                      {/* eslint-disable-next-line @typescript-eslint/no-explicit-any */}
                      {recommendations[0].artifacts.map((artifact: any, artifactIndex: number) => {
                        if ('id' in artifact) {
                          return (
                            <div key={`artifact-${artifact.id}-${artifactIndex}`} className="flex items-center gap-2 bg-neutral-700 rounded px-2 py-1">
                              <OptimizedImage
                                src={getImageWithFallback(artifact.image, artifact.name, 'artifact')}
                                alt={artifact.name}
                                className="w-6 h-6 rounded"
                                type="artifact"
                              />
                              <span className="text-xs text-white">{artifact.name}</span>
                            </div>
                          );
                        } else {
                          return (
                            <div key={`artifact-combo-${artifactIndex}`} className="flex items-center gap-2 bg-neutral-700 rounded px-2 py-1">
                              <span className="text-xs text-white">{artifact.description}</span>
                            </div>
                          );
                        }
                      })}
                    </div>
                  </div>
                )}

                {/* –°—Ç–∞—Ç—ã –∏ –∫–æ–º–∞–Ω–¥—ã */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="bg-neutral-700/50 rounded-lg p-3">
                    <h5 className="text-sm font-medium text-gray-400 mb-2">–°—Ç–∞—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</h5>
                    <p className="text-xs text-gray-500">–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Å—Ç–∞—Ç—ã –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —Ç–∞–ª–∞–Ω—Ç–æ–≤</p>
                    <Button
                      type="button"
                      onClick={() => handleEditRecommendation(recommendations[0])}
                      variant="outline"
                      size="sm"
                      className="mt-2"
                    >
                      –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—Ç–∞—Ç—ã
                    </Button>
                  </div>
                  
                  <div className="bg-neutral-700/50 rounded-lg p-3">
                    <h5 className="text-sm font-medium text-gray-400 mb-2">–ö–æ–º–∞–Ω–¥—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</h5>
                    <p className="text-xs text-gray-500">–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π</p>
                    <Button
                      type="button"
                      onClick={() => handleEditRecommendation(recommendations[0])}
                      variant="outline"
                      size="sm"
                      className="mt-2"
                    >
                      –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã
                    </Button>
                  </div>
                </div>
              </div>
            )}
          </div>
        )}

        {/* –¢–∞–ª–∞–Ω—Ç—ã */}
        {activeTab === 'talents' && (
          <div className="space-y-4">
            <TalentManager 
              characterId={formData.id || ''} 
              onSave={() => {
                const event = new CustomEvent('talentsUpdated', { detail: { characterId: formData.id } });
                window.dispatchEvent(event);
                console.log('Talents saved successfully');
              }}
            />
          </div>
        )}

        {/* –°–æ–∑–≤–µ–∑–¥–∏—è */}
        {activeTab === 'constellations' && (
          <div className="space-y-4">
            <ConstellationManager 
              characterId={formData.id || ''} 
              onSave={() => {
                const event = new CustomEvent('constellationsUpdated', { detail: { characterId: formData.id } });
                window.dispatchEvent(event);
                console.log('Constellations saved successfully');
              }}
            />
          </div>
        )}

        {/* –ö–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è */}
        <div className="flex justify-end space-x-3 pt-6 border-t border-neutral-700">
          <Button
            type="button"
            variant="outline"
            onClick={() => router.push('/admin/characters')}
            className="border-neutral-600 text-gray-400 hover:text-white"
          >
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button
            type="submit"
            disabled={saving}
            className="bg-gradient-to-r from-purple-600 to-purple-700 hover:from-purple-700 hover:to-purple-800"
          >
            <Save className="w-4 h-4 mr-2" />
            {saving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
          </Button>
        </div>
      </form>

      {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –≤—ã–Ω–µ—Å–µ–Ω—ã –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Ñ–æ—Ä–º—ã */}
      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –±–∏–ª–¥–æ–≤ */}
      {buildModalOpen && (
        <div className="fixed inset-0 bg-black/60 flex items-center justify-center z-50">
          <div className="bg-neutral-900 rounded-lg p-6 w-full max-w-4xl max-h-[90vh] overflow-y-auto">
            <h2 className="text-lg font-bold mb-4 text-white">
              {editingBuild ? "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∏–ª–¥" : "–î–æ–±–∞–≤–∏—Ç—å –±–∏–ª–¥"}
            </h2>
            <BuildForm
              initial={{ ...editingBuild, characterId: formData.id }}
              onCancel={() => { setBuildModalOpen(false); setEditingBuild(null); }}
              onSave={handleSaveBuild}
              characterWeaponType={formData.weaponType}
              characterId={formData.id}
            />
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π */}
      {recommendationModalOpen && (
        <div className="fixed inset-0 bg-black/60 flex items-center justify-center z-50">
          <div className="bg-neutral-900 rounded-lg p-6 w-full max-w-4xl max-h-[90vh] overflow-y-auto">
            <h2 className="text-lg font-bold mb-4 text-white">
              {editingRecommendation ? "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é" : "–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é"}
            </h2>
            <RecommendationForm
              initial={editingRecommendation}
              onCancel={() => { 
                setRecommendationModalOpen(false); 
                setEditingRecommendation(null); 
              }}
              onSave={handleSaveRecommendation}
              characterWeaponType={formData.weaponType}
              characterId={formData.id || ''}
            />
          </div>
        </div>
      )}
    </div>
  );
} 