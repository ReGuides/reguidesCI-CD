'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { Character } from '@/types';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import OptimizedImage from '@/components/ui/optimized-image';
import { Save, Upload, Star, Users, Sword, Shield, Globe, FileText, Settings, ArrowLeft } from 'lucide-react';
import Link from 'next/link';

export default function AddCharacterPage() {
  const router = useRouter();
  const [formData, setFormData] = useState<Partial<Character>>({
    name: '',
    id: '',
    element: '–ü–∏—Ä–æ',
    weaponType: '–î–≤—É—Ä—É—á–Ω—ã–π –º–µ—á',
    rarity: 5,
    region: '–ù–∞—Ç–ª–∞–Ω',
    description: '',
    image: ''
  });
  const [loading, setLoading] = useState(false);
  const [activeTab, setActiveTab] = useState<'basic' | 'details' | 'stats' | 'media' | 'builds'>('basic');

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    
    try {
      const response = await fetch('/api/characters', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData)
      });
      
      if (response.ok) {
        router.push('/admin/characters');
      } else {
        console.error('Error creating character');
      }
    } catch (error) {
      console.error('Error saving character:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleInputChange = (field: string, value: any) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const elements = [
    { value: '–ü–∏—Ä–æ', label: '–ü–∏—Ä–æ', color: 'bg-red-500', icon: 'üî•' },
    { value: '–ì–∏–¥—Ä–æ', label: '–ì–∏–¥—Ä–æ', color: 'bg-blue-500', icon: 'üíß' },
    { value: '–ê–Ω–µ–º–æ', label: '–ê–Ω–µ–º–æ', color: 'bg-green-500', icon: 'üå™Ô∏è' },
    { value: '–≠–ª–µ–∫—Ç—Ä–æ', label: '–≠–ª–µ–∫—Ç—Ä–æ', color: 'bg-purple-500', icon: '‚ö°' },
    { value: '–î–µ–Ω–¥—Ä–æ', label: '–î–µ–Ω–¥—Ä–æ', color: 'bg-green-600', icon: 'üå±' },
    { value: '–ö—Ä–∏–æ', label: '–ö—Ä–∏–æ', color: 'bg-cyan-500', icon: '‚ùÑÔ∏è' },
    { value: '–ì–µ–æ', label: '–ì–µ–æ', color: 'bg-yellow-500', icon: 'ü™®' }
  ];

  const weaponTypes = [
    { value: '–û–¥–Ω–æ—Ä—É—á–Ω—ã–π –º–µ—á', label: '–û–¥–Ω–æ—Ä—É—á–Ω—ã–π –º–µ—á', icon: '‚öîÔ∏è' },
    { value: '–î–≤—É—Ä—É—á–Ω—ã–π –º–µ—á', label: '–î–≤—É—Ä—É—á–Ω—ã–π –º–µ—á', icon: 'üó°Ô∏è' },
    { value: '–ö–æ–ø—å–µ', label: '–ö–æ–ø—å–µ', icon: 'üî±' },
    { value: '–õ—É–∫', label: '–õ—É–∫', icon: 'üèπ' },
    { value: '–ö–∞—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä', label: '–ö–∞—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä', icon: 'üìñ' }
  ];

  const regions = [
    { value: '–ú–æ–Ω–¥—à—Ç–∞–¥—Ç', label: '–ú–æ–Ω–¥—à—Ç–∞–¥—Ç', icon: 'üè∞' },
    { value: '–õ–∏ –Æ—ç', label: '–õ–∏ –Æ—ç', icon: 'üèÆ' },
    { value: '–ò–Ω–∞–¥–∑—É–º–∞', label: '–ò–Ω–∞–¥–∑—É–º–∞', icon: '‚ö°' },
    { value: '–°—É–º–µ—Ä—É', label: '–°—É–º–µ—Ä—É', icon: 'üå¥' },
    { value: '–§–æ–Ω—Ç–µ–π–Ω', label: '–§–æ–Ω—Ç–µ–π–Ω', icon: 'üåä' },
    { value: '–ù–∞—Ç–ª–∞–Ω', label: '–ù–∞—Ç–ª–∞–Ω', icon: 'üåã' },
    { value: '–°–Ω–µ–∂–Ω–∞—è', label: '–°–Ω–µ–∂–Ω–∞—è', icon: '‚ùÑÔ∏è' }
  ];

  const tabs = [
    { id: 'basic', label: '–û—Å–Ω–æ–≤–Ω–æ–µ', icon: Users },
    { id: 'details', label: '–î–µ—Ç–∞–ª–∏', icon: FileText },
    { id: 'stats', label: '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏', icon: Shield },
    { id: 'media', label: '–ú–µ–¥–∏–∞', icon: Upload },
    { id: 'builds', label: '–ë–∏–ª–¥—ã', icon: Settings }
  ];

  return (
    <div className="p-4 md:p-6 max-w-6xl mx-auto">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center space-x-4">
          <Link href="/admin/characters">
            <Button variant="outline" size="sm">
              <ArrowLeft className="w-4 h-4 mr-2" />
              –ù–∞–∑–∞–¥
            </Button>
          </Link>
          <h1 className="text-2xl md:text-3xl font-bold text-white">–î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</h1>
        </div>
      </div>

      <form onSubmit={handleSubmit} className="space-y-6">
        {/* –í–∫–ª–∞–¥–∫–∏ */}
        <div className="flex space-x-1 bg-neutral-700/50 rounded-lg p-1">
          {tabs.map((tab) => {
            const Icon = tab.icon;
            return (
              <button
                key={tab.id}
                type="button"
                onClick={() => setActiveTab(tab.id as any)}
                className={`flex items-center space-x-2 px-4 py-2 rounded-md text-sm font-medium transition-all ${
                  activeTab === tab.id
                    ? 'bg-purple-600 text-white shadow-lg'
                    : 'text-neutral-400 hover:text-white hover:bg-neutral-600'
                }`}
              >
                <Icon className="w-4 h-4 text-neutral-400" />
                <span>{tab.label}</span>
              </button>
            );
          })}
        </div>

        {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        {activeTab === 'basic' && (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="space-y-4">
              <div>
                <label className="text-sm text-gray-400 mb-2 block">–ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</label>
                <Input
                  value={formData.name}
                  onChange={(e) => handleInputChange('name', e.target.value)}
                  className="bg-neutral-700 border-neutral-600 text-white"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"
                  required
                />
              </div>

              <div>
                <label className="text-sm text-gray-400 mb-2 block">ID –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</label>
                <Input
                  value={formData.id}
                  onChange={(e) => handleInputChange('id', e.target.value)}
                  className="bg-neutral-700 border-neutral-600 text-white"
                  placeholder="albedo"
                  required
                />
              </div>

              <div>
                <label className="text-sm text-gray-400 mb-2 block">–≠–ª–µ–º–µ–Ω—Ç</label>
                <div className="grid grid-cols-2 gap-2">
                  {elements.map(element => (
                    <button
                      key={element.value}
                      type="button"
                      onClick={() => handleInputChange('element', element.value)}
                      className={`flex items-center space-x-2 p-3 rounded-lg border transition-all ${
                        formData.element === element.value
                          ? 'bg-purple-600 border-purple-500 text-white'
                          : 'bg-neutral-700 border-neutral-600 text-white hover:bg-neutral-600'
                      }`}
                    >
                      <span className="text-lg">{element.icon}</span>
                      <span className="text-sm">{element.label}</span>
                    </button>
                  ))}
                </div>
              </div>
            </div>

            <div className="space-y-4">
              <div>
                <label className="text-sm text-gray-400 mb-2 block">–¢–∏–ø –æ—Ä—É–∂–∏—è</label>
                <div className="grid grid-cols-2 gap-2">
                  {weaponTypes.map(weapon => (
                    <button
                      key={weapon.value}
                      type="button"
                      onClick={() => handleInputChange('weaponType', weapon.value)}
                      className={`flex items-center space-x-2 p-3 rounded-lg border transition-all ${
                        formData.weaponType === weapon.value
                          ? 'bg-purple-600 border-purple-500 text-white'
                          : 'bg-neutral-700 border-neutral-600 text-white hover:bg-neutral-600'
                      }`}
                    >
                      <span className="text-lg">{weapon.icon}</span>
                      <span className="text-sm">{weapon.label}</span>
                    </button>
                  ))}
                </div>
              </div>

              <div>
                <label className="text-sm text-gray-400 mb-2 block">–†–µ–¥–∫–æ—Å—Ç—å</label>
                <div className="flex space-x-2">
                  {[4, 5].map(rarity => (
                    <button
                      key={rarity}
                      type="button"
                      onClick={() => handleInputChange('rarity', rarity)}
                      className={`flex items-center space-x-2 px-4 py-3 rounded-lg border transition-all ${
                        formData.rarity === rarity
                          ? 'bg-yellow-600 border-yellow-500 text-white'
                          : 'bg-neutral-700 border-neutral-600 text-white hover:bg-neutral-600'
                      }`}
                    >
                      <Star className="w-4 h-4 text-yellow-400" />
                      <span className="font-medium">{rarity}‚òÖ</span>
                    </button>
                  ))}
                </div>
              </div>

              <div>
                <label className="text-sm text-gray-400 mb-2 block">–†–µ–≥–∏–æ–Ω</label>
                <select
                  value={formData.region}
                  onChange={(e) => handleInputChange('region', e.target.value)}
                  className="w-full px-3 py-2 bg-neutral-700 border border-neutral-600 rounded-lg text-white"
                >
                  {regions.map(region => (
                    <option key={region.value} value={region.value}>
                      {region.icon} {region.label}
                    </option>
                  ))}
                </select>
              </div>
            </div>
          </div>
        )}

        {/* –î–µ—Ç–∞–ª–∏ */}
        {activeTab === 'details' && (
          <div className="space-y-4">
            <div>
              <label className="text-sm text-gray-400 mb-2 block">–û–ø–∏—Å–∞–Ω–∏–µ</label>
              <textarea
                value={formData.description}
                onChange={(e) => handleInputChange('description', e.target.value)}
                className="w-full px-3 py-2 bg-neutral-700 border border-neutral-600 rounded-lg text-white resize-none"
                rows={6}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞..."
              />
            </div>

            <div className="flex items-center space-x-3">
              <input
                type="checkbox"
                id="isFeatured"
                checked={formData.isFeatured}
                onChange={(e) => handleInputChange('isFeatured', e.target.checked)}
                className="w-4 h-4 text-purple-600 bg-neutral-700 border-neutral-600 rounded"
              />
              <label htmlFor="isFeatured" className="text-sm text-gray-400">
                –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂
              </label>
            </div>
          </div>
        )}

        {/* –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ */}
        {activeTab === 'stats' && (
          <div className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="bg-neutral-700/50 rounded-lg p-4">
                <h3 className="text-sm font-medium text-neutral-300 mb-3">–ë–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</h3>
                <div className="space-y-2">
                  <div className="flex justify-between text-xs">
                    <span className="text-neutral-400">HP:</span>
                    <span className="text-white">12,380</span>
                  </div>
                  <div className="flex justify-between text-xs">
                    <span className="text-neutral-400">–ê—Ç–∞–∫–∞:</span>
                    <span className="text-white">234</span>
                  </div>
                  <div className="flex justify-between text-xs">
                    <span className="text-neutral-400">–ó–∞—â–∏—Ç–∞:</span>
                    <span className="text-white">751</span>
                  </div>
                </div>
              </div>

              <div className="bg-neutral-700/50 rounded-lg p-4">
                <h3 className="text-sm font-medium text-neutral-300 mb-3">–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</h3>
                <div className="space-y-2">
                  <div className="flex justify-between text-xs">
                    <span className="text-neutral-400">–ö—Ä–∏—Ç. —à–∞–Ω—Å:</span>
                    <span className="text-white">5%</span>
                  </div>
                  <div className="flex justify-between text-xs">
                    <span className="text-neutral-400">–ö—Ä–∏—Ç. —É—Ä–æ–Ω:</span>
                    <span className="text-white">50%</span>
                  </div>
                </div>
              </div>

              <div className="bg-neutral-700/50 rounded-lg p-4">
                <h3 className="text-sm font-medium text-neutral-300 mb-3">–≠–ª–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</h3>
                <div className="space-y-2">
                  <div className="flex justify-between text-xs">
                    <span className="text-neutral-400">–ú–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ —Å—Ç–∏—Ö–∏–π:</span>
                    <span className="text-white">0</span>
                  </div>
                  <div className="flex justify-between text-xs">
                    <span className="text-neutral-400">–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏:</span>
                    <span className="text-white">100%</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* –ú–µ–¥–∏–∞ */}
        {activeTab === 'media' && (
          <div className="space-y-4">
            <div>
              <label className="text-sm text-gray-400 mb-2 block">URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</label>
              <Input
                value={formData.image}
                onChange={(e) => handleInputChange('image', e.target.value)}
                className="bg-neutral-700 border-neutral-600 text-white"
                placeholder="/images/characters/albedo.png"
              />
            </div>

            {formData.image && (
              <div className="border border-neutral-700 rounded-lg p-4 bg-neutral-700/30">
                <h3 className="text-sm text-gray-400 mb-3">–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä</h3>
                <div className="flex items-center space-x-4">
                  <OptimizedImage
                    src={formData.image}
                    alt={formData.name || 'Character'}
                    className="w-20 h-20 rounded-lg object-cover border border-neutral-600"
                    type="character"
                  />
                  <div>
                    <h4 className="text-white font-medium text-lg">{formData.name}</h4>
                    <div className="flex items-center space-x-2 mt-2">
                      {elements.find(e => e.value === formData.element) && (
                        <Badge className={elements.find(e => e.value === formData.element)?.color}>
                          {elements.find(e => e.value === formData.element)?.icon} {elements.find(e => e.value === formData.element)?.label}
                        </Badge>
                      )}
                      <Badge className="bg-yellow-600">
                        <Star className="w-3 h-3 mr-1" />
                        {formData.rarity}‚òÖ
                      </Badge>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        )}

        {/* –ë–∏–ª–¥—ã */}
        {activeTab === 'builds' && (
          <div className="space-y-4">
            <div className="text-center py-8 text-neutral-400">
              <Settings className="w-12 h-12 mx-auto mb-4 text-neutral-600" />
              <p>–ë–∏–ª–¥—ã –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</p>
              <p className="text-sm">–°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –∑–∞—Ç–µ–º –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∏–ª–¥–æ–≤</p>
            </div>
          </div>
        )}

        {/* –ö–Ω–æ–ø–∫–∏ */}
        <div className="flex justify-end space-x-3 pt-6 border-t border-neutral-700">
          <Link href="/admin/characters">
            <Button
              type="button"
              variant="outline"
              className="border-neutral-600 text-gray-400 hover:text-white"
            >
              –û—Ç–º–µ–Ω–∞
            </Button>
          </Link>
          <Button
            type="submit"
            disabled={loading}
            className="bg-gradient-to-r from-purple-600 to-purple-700 hover:from-purple-700 hover:to-purple-800"
          >
            <Save className="w-4 h-4 mr-2" />
            {loading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
          </Button>
        </div>
      </form>
    </div>
  );
} 