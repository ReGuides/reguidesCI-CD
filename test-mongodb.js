// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB
const mongoose = require('mongoose');

const MONGODB_URI = 'mongodb://localhost:27017/reguides';

async function testConnection() {
  try {
    console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...');
    console.log('URI:', MONGODB_URI);
    
    await mongoose.connect(MONGODB_URI, {
      bufferCommands: false,
      maxPoolSize: 10,
      minPoolSize: 2,
      maxIdleTimeMS: 30000,
      serverSelectionTimeoutMS: 5000,
      socketTimeoutMS: 45000,
      heartbeatFrequencyMS: 10000,
      retryWrites: true,
      retryReads: true,
    });
    
    console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    const collections = await mongoose.connection.db.listCollections().toArray();
    console.log('üìã –ö–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ –±–∞–∑–µ:');
    collections.forEach(col => {
      console.log(`  - ${col.name}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é News
    const News = mongoose.model('News', new mongoose.Schema({}, { strict: false }));
    const newsCount = await News.countDocuments();
    console.log(`üì∞ –ù–æ–≤–æ—Å—Ç–µ–π –≤ –±–∞–∑–µ: ${newsCount}`);
    
    await mongoose.disconnect();
    console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç MongoDB');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:');
    console.error('–°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
    console.error('–ö–æ–¥:', error.code);
    console.error('–ò–º—è:', error.name);
    
    if (error.code === 'ECONNREFUSED') {
      console.log('\nüí° –†–µ—à–µ–Ω–∏–µ:');
      console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ MongoDB –∑–∞–ø—É—â–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ');
      console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ MongoDB —Å–ª—É—à–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 27017');
      console.log('3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ MongoDB: mongod');
    }
  }
}

testConnection();
