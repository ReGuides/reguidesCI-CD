name: Deploy to Production

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests
      run: npm test
      continue-on-error: true
    
    - name: Build project
      run: npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
    
    # Создаем архив с готовым билдом
    - name: Create build archive
      run: |
        tar -czf build.tar.gz .next package.json package-lock.json public src/lib/config.ts ecosystem.config.js
    
    # Передаем архив на сервер
    - name: Upload build to server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        source: "build.tar.gz"
        target: "/var/www/reguides"
    
    # Разворачиваем на сервере
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          cd /var/www/reguides
          
          # Останавливаем текущий процесс
          pm2 stop reguides-nextjs 2>/dev/null || true
          
          # Создаем backup текущей версии
          if [ -d ".next" ]; then
            mv .next .next.backup.$(date +%Y%m%d_%H%M%S)
          fi
          
          # Очищаем старые файлы
          rm -rf .next
          rm -f package-lock.json
          
          # Распаковываем новый билд
          tar -xzf build.tar.gz
          
          # Устанавливаем только production зависимости
          npm ci --only=production
          
          # Запускаем приложение
          pm2 start ecosystem.config.js --env production
          
          # Очищаем архив
          rm -f build.tar.gz
          
          echo "✅ Деплой завершен успешно!"