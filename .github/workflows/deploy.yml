name: Deploy to Production

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'
    
    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit
    
    - name: Run tests
      run: npm test
      continue-on-error: true
    
    - name: Build project
      run: npm run build
      env:
        NODE_ENV: production
        NEXT_TELEMETRY_DISABLED: 1
    
    - name: Create build archive
      run: |
        tar -czf build.tar.gz .next package.json package-lock.json public src/lib/config.ts ecosystem.config.js
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: build.tar.gz
        retention-days: 1

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
    
    # Проверяем, что файл существует
    - name: Check build file
      run: |
        ls -la build.tar.gz
        file build.tar.gz
        du -h build.tar.gz
    
    # Проверяем SSH подключение
    - name: Test SSH connection
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          echo "SSH connection successful!"
          ls -la /var/www/reguides || echo "Directory does not exist"
          whoami
          pwd
    
    # Передаем архив на сервер (альтернативный способ)
    - name: Upload build to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          # Создаем директорию если не существует
          mkdir -p /var/www/reguides
          
          # Останавливаем текущий процесс
          pm2 stop reguides-nextjs 2>/dev/null || true
          
          # Создаем backup текущей версии
          if [ -d "/var/www/reguides/.next" ]; then
            mv /var/www/reguides/.next /var/www/reguides/.next.backup.$(date +%Y%m%d_%H%M%S)
          fi
          
          # Очищаем старые файлы
          rm -rf /var/www/reguides/.next
          rm -f /var/www/reguides/package-lock.json
          
          echo "Ready for file upload"
    
    # Загружаем файл через scp
    - name: Copy build file to server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        source: "build.tar.gz"
        target: "/var/www/reguides/"
        debug: true
        overwrite: true
    
    # Разворачиваем на сервере
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          cd /var/www/reguides
          
          # Останавливаем текущий процесс
          pm2 stop reguides-nextjs 2>/dev/null || true
          
          # Создаем backup текущей версии
          if [ -d ".next" ]; then
            mv .next .next.backup.$(date +%Y%m%d_%H%M%S)
          fi
          
          # Очищаем старые файлы
          rm -rf .next
          rm -f package-lock.json
          
          # Распаковываем новый билд
          tar -xzf build.tar.gz
          
          # Устанавливаем только production зависимости
          npm ci --only=production --prefer-offline --no-audit
          
          # Запускаем приложение
          pm2 start ecosystem.config.js --env production
          
          # Очищаем архив
          rm -f build.tar.gz
          
          echo "✅ Деплой завершен успешно!"